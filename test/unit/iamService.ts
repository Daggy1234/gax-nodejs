// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
import * as assert from 'assert';
import {describe, it} from 'mocha';
// eslint-disable-next-line @typescript-eslint/no-var-requires
const {IamClient, IamBuilder} = require('../../src');
import {GrpcClient as FallbackGrpcClient} from '../../src/fallback';

class FakeError {
  name: string;
  message: string;
  code: number;
  constructor(n: number) {
    this.name = 'fakeName';
    this.message = 'fake message';
    this.code = n;
  }
}
export interface Callback {
  (err: FakeError | null, response?: {} | null): void;
}
function mockSimpleGrpcMethod(
  expectedRequest: {},
  response: {} | null | undefined,
  error: FakeError | null
) {
  return (actualRequest: {}, options: {}, callback: Callback) => {
    assert.deepStrictEqual(actualRequest, expectedRequest);
    if (error) {
      callback(error);
    } else if (response) {
      callback(null, response);
    } else {
      callback(null);
    }
  };
}
describe('Iam service', () => {
  it('create Iam client by constructor', done => {
    const iamClient = new IamClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    assert(iamClient);
    assert(iamClient.setIamPolicy('fake request'));
    done();
  });

  it('create Iam client by Builder, grpc-fallback', done => {
    const gaxGrpc = new FallbackGrpcClient({});
    assert(gaxGrpc.fallback);
    const IamClient = IamBuilder(gaxGrpc);
    assert(IamClient);
    done();
  });

  it('call getIamPolicy', done => {
    const client = new IamClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    // Mock request
    const request = {};
    // Mock response
    const expectedResponse = undefined;
    // Mock gRPC layer
    client._innerApiCalls.getIamPolicy = mockSimpleGrpcMethod(
      request,
      expectedResponse,
      null
    );

    client.getIamPolicy(request, (err: {}, response: {}) => {
      assert.deepStrictEqual(response, expectedResponse);
      done();
    });
  });

  it('call setIamPolicy', done => {
    const client = new IamClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    // Mock request
    const request = {};
    // Mock response
    const expectedResponse = undefined;
    // Mock gRPC layer
    client._innerApiCalls.setIamPolicy = mockSimpleGrpcMethod(
      request,
      expectedResponse,
      null
    );

    client.setIamPolicy(request, (err: {}, response: {}) => {
      assert.deepStrictEqual(response, expectedResponse);
      done();
    });
  });

  it('call testIamPermissions', done => {
    const client = new IamClient({
      credentials: {client_email: 'bogus', private_key: 'bogus'},
      projectId: 'bogus',
    });
    // Mock request
    const request = {};
    // Mock response
    const expectedResponse = undefined;
    // Mock gRPC layer
    client._innerApiCalls.testIamPermissions = mockSimpleGrpcMethod(
      request,
      expectedResponse,
      null
    );

    client.testIamPermissions(request, (err: {}, response: {}) => {
      assert.deepStrictEqual(response, expectedResponse);
      done();
    });
  });
});
